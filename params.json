{"name":"Py2docx","tagline":"A python module to create DOCX documents","body":"Py2Docx - 0.2.0v \r\n=======\r\n#### Release Date: June 18, 2014\r\n\r\nPy2Docx is a python module to write .docx documents (>= Microsoft Word 2007).\r\n\r\n# Last Modifications\r\n- Image have two optional arguments: width and height;\r\n- FIX: Image read and write problems.\r\n\r\n# Instalation\r\n```\r\n$ pip install py2docx\r\n```\r\n\r\n\r\n# Example\r\n\r\n```python\r\n# coding: utf-8\r\nfrom py2docx.docx import Docx\r\nfrom py2docx.elements import Block\r\nfrom py2docx.elements.text import InlineText, Break, BlockText\r\nfrom py2docx.elements.image import Image\r\nfrom py2docx.elements.table import Table, Cell\r\n\r\ndoc = Docx()\r\nt1 = InlineText(\"An Inline Text\", bold=True, italic=True,\r\n                underline={'style': 'solid', 'color': '#4433ff'},\r\n                color=\"#FF0000\")\r\n\r\nbl = Block()\r\nbl.append(t1)\r\n\r\nbl2 = Block(align='center')\r\nbl2.append(t1)\r\n\r\nt = Table(width=\"100%\", padding='5pt', border={'left': {'style': 'dashed'}})\r\nc1 = Cell()\r\nc1.append(bl)\r\nc2 = Cell([bl])\r\nc3 = Cell(bl2, valign='top', border={'left': {'size': '1pt', 'color': '#33ddff'}})\r\n\r\nt.add_row([c1, c2])\r\nt.add_row([c1, c3])\r\n\r\nbl3 = Block([InlineText(\"Inline Text \"),\r\n             InlineText(\"Bold Here\", bold=True)])\r\n\r\ni = Image(\"Pictures/into_the_wild.jpg\", document=doc,\r\n          align='center', width='50%', height='50%')\r\n\r\ndoc.append(bl)\r\ndoc.append(t)\r\ndoc.append(Block(Break()))\r\ndoc.append(i)\r\ndoc.append(BlockText(\"This is a Block Text\"))\r\ndoc.append(Block(InlineText(\"This is a Block Text\")))\r\ndoc.append(bl3)\r\ndoc.append(BlockText(u\"Arial Test\", font='Arial', size=20))\r\n\r\ndoc.save(\"./py2docx.docx\")\r\n```\r\n\r\n\r\n# API\r\n\r\n## Creating a Document\r\n\r\n### Docx\r\n```python\r\nfrom py2docx.docx import Docx\r\n```\r\n\r\nCreate a document\r\n\r\n###### Methods:\r\n##### append(elem)\r\n\r\nParameter | Description\r\n--------- | -----------\r\nelem      | An Image, Block or Table to put in the document.\r\n\r\n```python\r\ndoc = Docx()\r\nbl = Block()\r\ndoc.append(bl)\r\n```\r\n\r\n##### save(path)\r\n\r\nParameter | Description\r\n--------- | -----------\r\npath      | The path that the document are going to be saved.\r\n\r\n```python\r\ndoc = Docx()\r\ndoc.save(\"./example.docx\")\r\n```\r\n\r\n\r\n## Elements\r\n\r\n### Block\r\n```python\r\nfrom py2docx.docx.elements import Block\r\n```\r\n\r\nBlock elements is almost the same like \"\\<div\\>\" HTML element.\r\n\r\n###### Methods:\r\n##### __init__(initial=None, align=None)\r\n\r\nParameter | Description\r\n--------- | -----------\r\ninitial | One element or a list of elements to put inside the block.\r\nalign | Horizontal align. Options are: 'left', 'right', 'center' or 'justify'.\r\n\r\n```python\r\ntext = InlineText(\"Hello World!\")\r\nblock = Block(text, align='center')\r\n```\r\n\r\n##### append(elem)\r\n\r\n```python\r\ntext = InlineText(\"Hello World!\")\r\nblock = Block()\r\nblock.append(text)\r\n```\r\n\r\nParameter  | Description\r\n---------- | -----------\r\nelem | Any element to put inside the block.\r\n\r\n\r\n\r\n### Image\r\n```python\r\nfrom py2docx.elements.image import Image\r\n```\r\n\r\n###### Methods:\r\n##### __init__(path, document, align=None, width='100%', height='100%')\r\n\r\nThe accepted types are: png, jpg, gif, jpeg.\r\n\r\nParameters | Description\r\n---------- | -----------\r\npath       | A string with the image's path.\r\ndocument   | The instance of the document (Docx())\r\nalign      | Horizontal Align. Values should be: 'left', 'center' or 'right'\r\nwidth      | Width in percentage (string format: '90%').\r\nheight     | Heigth in percentage (string format: '50%').\r\n\r\n```python\r\ndoc = Docx()\r\nImage(\"/Pictures/image.png\", document=doc,\r\n      align='right', width='80%', heigth='40%')\r\n```\r\n\r\n\r\n\r\n### Table\r\n```python\r\nfrom py2docx.elements.table import Table\r\n```\r\n\r\n###### Methods:\r\n##### __init__(padding=None, width=None, border=None)\r\n\r\nParameters | Description\r\n---------- | -----------\r\npadding    | Padding for all cells. Should be in one of these units: cm (centimeters), in (inches) or pt (points). The numbers should be in the W3C CSS Format.\r\nwidth      | Width of the table. Should be in one of these units: % (percentage), cm (centimeters), in (inches) or pt (points).\r\nborder     | A dict with the specifications. Should be in this format: {'[SIDE]': {'color': '#[HEX]', 'size': '[INT]pt', 'style': '[dotted,dashed,solid,double]'}. The maximum size of the border is 12pt, minimum is 0.5pt.\r\n\r\n```python\r\nTable(width='100%', padding='2cm', border={'left': {'color': '#FF0000', 'size': '2pt', 'style': 'dotted'},\r\n                                           'bottom': {'color': '#FF0000', 'size': '2pt',' style': 'dashed'},\r\n                                           'top': {'color': '#FFFFFF', 'size': '3pt', 'style': 'solid'},\r\n                                           'right': {'color': '#000000', 'size': '3pt', 'style': 'double'}})\r\n```\r\n\r\n##### add_row(cells)\r\n\r\nParameters | Description\r\n---------- | -----------\r\ncells      | A list of Cells to put on a row.\r\n\r\n```python\r\nt = Table(width='100%')\r\nt.add_row([Cell(), Cell()])\r\n```\r\n\r\n\r\n\r\n### Cell\r\n```python\r\nfrom py2docx.elements.table import Cell\r\n```\r\n\r\n###### Methods:\r\n##### __init__(initial=None, bgcolor=None, padding=None, width=None, valign=None, nowrap=None, border=None, colspan=1)\r\n\r\n\r\nParameters | Description\r\n---------- | -----------\r\ninitial    | One element or a list of elements to put inside the cell.\r\nbgcolor    | Background color of the cell, in hexadecimal '#00FF66'.\r\npadding    | Padding for cell. Should be in one of these units: cm (centimeters), in (inches) or pt (points). The numbers should be in the W3C CSS Format.\r\nwidth      | Width of the cell. Should be in one of these units: % (percentage), cm (centimeters), in (inches) or pt (points).\r\nvalign     | Vertical Align. Options are: 'top', 'center', 'bottom'.\r\nnowrap     | True or False. It does not work with width.\r\nborder     | A dict with the specifications. Should be in this format: {'[SIDE]': {'color': '#[HEX]', 'size': '[INT]pt', 'style': '[dotted,dashed,solid,double]'}. The maximum size of the border is 12pt, minimum is 0.5pt.\r\ncolspan    | An int with the number of cells.\r\n\r\n```python\r\nCell([Image(\"path/filename.ext\"), BlockText(\"Hello World!\")], bgcolor='#3377FF', padding='5cm 10cm',\r\n     width='5cm', valign='center', border={'bottom': {'color': '#FF0000', 'size': '2pt', 'style': 'dashed'}, colspan=2)\r\n```\r\n\r\n\r\n##### append(elem)\r\n\r\n```python\r\ntext = InlineText(\"Hello World!\")\r\nc = Cell()\r\nc.append(text)\r\n```\r\n\r\nParameter  | Description\r\n---------- | -----------\r\nelem       | A Cell, Block, BlockText or Image, to put inside the cell.\r\n\r\n\r\n\r\n### InlineText\r\n\r\n```python\r\nfrom py2docx.elements.text import InlineText\r\n```\r\n\r\nYou should put this in a Block. This is like a \"\\<span\\>\" HTML element.\r\n\r\n###### Methods:\r\n##### __init__(text, bold=None, italic=None, underline=None, uppercase=None, color=None, font=None, size=None)\r\n\r\n\r\nParameters | Description\r\n---------- | -----------\r\ntext       | A string with words.\r\nbold       | True or False.\r\nitalic     | True or False.\r\nunderline  | A dict with properties: {'style': '[dotted/dashed/solid/double]', 'color': '#[HEX]'}.\r\nuppercase  | True or False.\r\ncolor      | Hexadecimal color.\r\nfont       | Should be 'Cambria', 'Times New Roman', 'Arial' or 'Calibri'.\r\nsize       | An INT of font's size in point.\r\n\r\n```python\r\nInlineText(\"Hello World!\", bold=True, italic=True,\r\n                underline={'style': 'solid', 'color': '#4433ff'},\r\n                uppercase=True, color=\"#FF0000\", font=\"Times New Roman\",\r\n                size=14)\r\n```\r\n\r\n\r\n\r\n### Break\r\n```python\r\nfrom py2docx.elements.text import Break\r\n```\r\n\r\nThe same as \"\\<br\\ \\>\" HTML element.\r\n\r\n```python\r\nhello = InlineText(\"Hello\")\r\nworld = InlineText(\"World\", bold=True)\r\n\r\nBlock([hello, Break(), world])\r\n```\r\n\r\n\r\n\r\n### BlockText\r\n```python\r\nfrom py2docx.elements.text import BlockText\r\n```\r\n\r\nThe same thing as:\r\n\r\n```python\r\nBlock(InlineText(\"Hello World\"))\r\n```\r\n\r\n###### Methods:\r\n##### __init__(text, bold=None, italic=None, underline=None, uppercase=None, color=None, font=None, size=None)\r\n\r\n\r\nParameters | Description\r\n---------- | -----------\r\ntext       | A string with words.\r\nbold       | True or False.\r\nitalic     | True or False.\r\nunderline  | A dict with properties: {'style': '[dotted/dashed/solid/double]', 'color': '#[HEX]'}.\r\nuppercase  | True or False.\r\ncolor      | Hexadecimal color.\r\nfont       | Should be 'Cambria', 'Times New Roman', 'Arial' or 'Calibri'.\r\nsize       | An INT of font's size in point.\r\n\r\n```python\r\nBlockText(\"Hello World!\", bold=True, italic=True,\r\n          underline={'style': 'solid', 'color': '#4433ff'},\r\n          uppercase=True, color=\"#FF0000\", font=\"Times New Roman\",\r\n          size=14)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}